% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/residual_encoding_c.R
\name{estimate_residual_encoding_c}
\alias{estimate_residual_encoding_c}
\title{Build residual class classification trajectory.}
\usage{
estimate_residual_encoding_c(data, ...,
  fit_predict = xgboost_fit_predict_c, evars, avars, dep_var,
  dep_target = TRUE, cross_plan = vtreat::kWayStratifiedY(nrow(data),
  3, data, data[[dep_var]] == dep_target), n_comp = 20, cl = NULL)
}
\arguments{
\item{data}{The data.frame of data to fit.}

\item{...}{not used, force arguments to be bound by name}

\item{fit_predict}{A function with signature fit_predict(train_data, vars, dep_var, dep_target, application_data) that returns a matrix with one row of predictions per row of appication_data, and an ordered set of columns of predictions.}

\item{evars}{character vector, categorical explanatory variable names to be encoded.}

\item{avars}{character vector, additional explanatory variable names.}

\item{dep_var}{character, the name of dependent variable.}

\item{dep_target}{scalar, the value considered to be the target category of dep_var.}

\item{cross_plan}{a vtreat-style cross validation plan for data rows (list of disjoint tran/app lists where app partitions the data rows).}

\item{n_comp}{number of components to generate}

\item{cl}{parallel cluster for processing}
}
\value{
a matrix with the same number of rows as data representing the cross-validated modeling residual trajectories.
}
\description{
Build a cross-validated residual trajectory for a model.
}
\examples{

data <- iris
avars <- c("Sepal.Length", "Petal.Length")
evars <- c("Sepal.Width", "Petal.Width")
dep_var <- "Species"
dep_target <- "versicolor"
for(vi in evars) {
  data[[vi]] <- as.character(round(data[[vi]]))
}
cross_enc <- estimate_residual_encoding_c(
  data = data,
  avars = avars,
  evars = evars,
  fit_predict = xgboost_fit_predict_c,
  dep_var = dep_var,
  dep_target = dep_target,
  n_comp = 4
)
enc <- prepare(cross_enc$coder, data)
data <- cbind(data, enc)
newvars <- c(avars, colnames(enc))
f <- wrapr::mk_formula(dep_var, newvars, outcome_target = dep_target)
model <- glm(f, data = data, family = binomial)
data$pred <- predict(model, newdata = data, type = "response")
table(data$Species, data$pred>0.5)

}
